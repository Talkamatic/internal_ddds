--- main menu
S> ["ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- asking about time
U> ["ask(?X.current_time(X))"]
S> ["answer(current_time(\"10:05\"))"]

--- setting the time (menu driven)
U> ["request(set_time)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.hour_to_set(X))"]
U> ["answer(11)"]
S> ["icm:acc*pos", "ask(?X.minute_to_set(X))"]
U> ["answer(10)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SetTime, [hour_to_set(11), minute_to_set(10)], SuccessfulServiceAction()))"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- setting the alarm (menu driven)
U> ["request(set_alarm)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.alarm_hour(X))"]
U> ["answer(11)"]
S> ["icm:acc*pos", "ask(?X.alarm_minute(X))"]
U> ["answer(10)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SetAlarm, [alarm_hour(11), alarm_minute(10)], SuccessfulServiceAction()))"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- setting the time, one-shot
U> ["request(set_time)", "answer(hour_to_set(11))", "answer(minute_to_set(10))"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SetTime, [hour_to_set(11), minute_to_set(10)], SuccessfulServiceAction()))"]

U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- invalid hour (menu driven)
U> ["request(set_time)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.hour_to_set(X))"]
U> ["answer(25)"]
S> ["icm:acc*neg:rejected(set([hour_to_set(25)]), HourValidity)", "icm:reraise", "ask(?X.hour_to_set(X))"]

--- invalid minute (menu driven)
U> ["request(set_time)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.hour_to_set(X))"]
U> ["answer(hour_to_set(11))"]
S> ["icm:acc*pos", "ask(?X.minute_to_set(X))"]
U> ["answer(minute_to_set(65))"]
S> ["icm:acc*neg:rejected(set([minute_to_set(65)]), MinuteValidity)", "icm:reraise", "ask(?X.minute_to_set(X))"]

--- invalid hour (one-shot)
U> ["request(set_time)", "answer(hour_to_set(25))", "answer(minute_to_set(10))"]
S> S> ["icm:acc*pos", "icm:acc*neg:rejected(set([hour_to_set(25)]), HourValidity)", "icm:reraise", "ask(?X.hour_to_set(X))"]

--- invalid minute (one-shot)
U> ["request(set_time)", "answer(hour_to_set(11))", "answer(minute_to_set(65))"]
S> ["icm:acc*pos", "icm:acc*neg:rejected(set([minute_to_set(65)]), MinuteValidity)", "icm:reraise", "ask(?X.minute_to_set(X))"]

--- setting the time again
U> ["request(set_time)", "answer(hour_to_set(11))", "answer(minute_to_set(10))"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SetTime, [hour_to_set(11), minute_to_set(10)], SuccessfulServiceAction()))"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]
U> ["request(set_time)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.hour_to_set(X))"]

--- setting the alarm
U> ["request(set_alarm)", "answer(alarm_hour(7))", "answer(alarm_minute(30))"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SetAlarm, [alarm_hour(7), alarm_minute(30)], SuccessfulServiceAction()))"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- remove the alarm
U> ["request(remove_alarm)"]
S> ["icm:acc*pos", "ask(?preconfirmed(RemoveAlarm, []))"]
U> ["answer(yes)"]
S> ["report(ServiceResultProposition(RemoveAlarm, [], SuccessfulServiceAction()))"]

--- cannot snooze alarm which is not ringing
U> ["request(snooze)"]
S> ["report(ServiceResultProposition(Snooze, [], FailedServiceAction(not_ringing)))"]

--- turn off alarm
U> ["request(turn_off_alarm)"]
S> ["icm:acc*pos", "prereport(TurnOffAlarm, [], ddd_name='hello_world')"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- unimplemented function
U> ["request(sync_to_internet)"]
S> ["icm:acc*neg:goal(perform(sync_to_internet))", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- unimplemented function, acknowledge level, user timeout
U> {"utterance": "sync to the internet", "moves": [{"semantic_expression": "request(sync_to_internet)", "perception_confidence": 0.9, "understanding_confidence": 0.2}]}
S> ["icm:und*pos:USR*goal(perform(sync_to_internet))"]
U>
S> ["icm:acc*neg:goal(perform(sync_to_internet))", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- unimplemented function, acknowledge level, user says yes
U> {"utterance": "sync to the internet", "moves": [{"semantic_expression": "request(sync_to_internet)", "perception_confidence": 0.9, "understanding_confidence": 0.2}]}
S> ["icm:und*pos:USR*goal(perform(sync_to_internet))"]
U> ["answer(yes)"]
S> ["icm:acc*neg:goal(perform(sync_to_internet))", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- unimplemented function, check level treated as acknowledge, user timeout
U> {"utterance": "sync to the internet", "moves": [{"semantic_expression": "request(sync_to_internet)", "perception_confidence": 0.9, "understanding_confidence": 0.12}]}
S> ["icm:und*pos:USR*goal(perform(sync_to_internet))"]
U>
S> ["icm:acc*neg:goal(perform(sync_to_internet))", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- unimplemented function, check level treated as acknowledge, user says yes
U> {"utterance": "sync to the internet", "moves": [{"semantic_expression": "request(sync_to_internet)", "perception_confidence": 0.9, "understanding_confidence": 0.12}]}
S> ["icm:und*pos:USR*goal(perform(sync_to_internet))"]
U> ["answer(yes)"]
S> ["icm:acc*neg:goal(perform(sync_to_internet))", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- select alarm, menu
U> ["request(select_alarm)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.alarm_to_select(X))"]
U> ["answer(work_alarm)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SelectAlarm, [alarm_to_select(work_alarm)], SuccessfulServiceAction()))"]

--- select alarm, one-shot
U> ["request(select_alarm)", "answer(work_alarm)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(SelectAlarm, [alarm_to_select(work_alarm)], SuccessfulServiceAction()))"]

--- no reraise
U> ["request(set_time)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.hour_to_set(X))"]
U> ["ask(?X.current_time(X))"]
S> ["answer(current_time(\"10:05\"))"]
U>
S> ["ask(?X.hour_to_set(X))"]

--- clarification
U> ["answer(11)"]
S> ["icm:und*neg", "ask(?set([goal(perform(set_time)), goal(perform(set_alarm))]))"]

--- clarification downdated if unanswered
S> ["ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]
U> ["answer(11)"]
S> ["icm:und*neg", "ask(?set([goal(perform(set_time)), goal(perform(set_alarm))]))"]
U>
S> ["icm:reraise", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- positive feedback of understanding negative issue
U> {"utterance": "what time is it", "moves": [{"semantic_expression": "ask(?X.current_time(X))", "perception_confidence": 0.9, "understanding_confidence": 0.12}]}
S> ["icm:und*int:USR*goal(resolve(?X.current_time(X)))"]
U> ["answer(no)"]
S> ["icm:und*pos:USR*~goal(resolve(?X.current_time(X)))", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- negative acceptance icm perform goal
U> ["request(select_alarm)"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.alarm_to_select(X))"]
U> ["icm:acc*neg:issue"]
S> ["report(action_status(select_alarm, aborted(non-optional-question)))"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]


--- negative acceptance icm resolve goal
U> ["ask(?X.current_alarm(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.alarm_to_select(X))"]
U> ["icm:acc*neg:issue"]
S> ["report(question_status(?X.current_alarm(X), aborted(non-optional-question)))"]
U>
S> ["icm:reraise:perform(top)", "ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]

--- negative acceptance icm top goal
S> ["ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]
U> ["icm:acc*neg:issue"]
S> ["report(action_status(top, aborted(non-optional-question)))"]
U>
S> ["ask(?set([goal(resolve(?X.current_time(X))), goal(perform(set_time))]))"]
