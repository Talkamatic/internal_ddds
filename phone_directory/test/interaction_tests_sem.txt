--- system initiates conversation
S> ["ask(?X.goal(X))"]

--- knowledge precondition question, WH answer
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]

--- knowledge precondition question, positive answer
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(yes)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?X.person_city(X))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]

--- knowledge precondition question, negative answer
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(no)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?X.person_area(X))"]

--- knowledge precondition question, negative acceptance from user
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["icm:acc*neg:issue"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?X.person_area(X))"]

--- user question about individual
U> ["ask(?X.age(X))", "answer(arne_osvaldsson)", "answer(uddevalla)"]
S> ["icm:report_inference:person(person_arne_osvaldsson)", "answer(age(70))"]

--- user question about alternatives
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["ask(?X.age(X))"]
S> ["answer(implies(person(person_susanna_andersson_4), age(77)))"]
U>
S> ["answer(implies(person(person_susanna_andersson_2), age(42)))"]
U>
S> ["answer(implies(person(person_susanna_andersson_1), age(31)))"]
U>
S> ["icm:reraise:resolve(?X.phonenumber(X))", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["ask(?X.phonenumber(X))", "answer(person_age(42))"]
S> ["icm:report_inference:person(person_susanna_andersson_2)", "answer(phonenumber(\"070-1234542\"))"]
U>
S> ["icm:reraise:perform(top)", "ask(?X.goal(X))"]


--- don't ask feature question whose answer is inferable
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(ada_kallesson)"]
S> ["icm:acc*pos", "icm:report_inference:person_city(goteborg)", "answer(number_of_alternatives(2))", "ask(?X.person_area(X))"]

# --- post-system-answer answer revision with question repeated
# U> ["ask(?X.phonenumber(X))"]
# S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
# U> ["answer(susanna_andersson)"]
# S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
# U> ["answer(goteborg)"]
# S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
# U> ["ask(?X.age(X))"]
# S> ["answer(implies(person(person_susanna_andersson_4), age(77)))"]
# U>
# S> ["answer(implies(person(person_susanna_andersson_2), age(42)))"]
# U>
# S> ["answer(implies(person(person_susanna_andersson_1), age(31)))"]
# U>
# S> ["icm:reraise:resolve(?X.phonenumber(X))", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
# U> ["answer(person_age(42))"]
# S> ["icm:report_inference:person(person_susanna_andersson_2)", "answer(phonenumber(\"070-1234542\"))"]
# U> ["ask(?X.phonenumber(X))", "answer(person_age(31))"]
# S> ["icm:report_inference:person(person_susanna_andersson_1)", "answer(phonenumber(\"070-1234531\"))"]
# U>
# S> ["ask(?X.goal(X))"]

# TODO, with new ICM for "hur är det med hon som är 31 år"
#--- post-system-answer answer revision with
#U> ["ask(?X.phonenumber(X))"]
#S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
#U> ["answer(susanna_andersson)"]
#S> Vet du i vilken stad hen bor?
#U> ["answer(goteborg)"]
#S> I vilken stadsdel bor hen?
#U> ["ask(?X.age(X))"]
#S> Susanna Andersson på Vasagatan 11 i Göteborg är 42 år.
#U>
#S> Susanna Andersson på Kompassgatan 10 i Göteborg är 31 år.
#U>
#S> Susanna Andersson på Olivedalsgatan 12 i Göteborg är 77 år.
#U>
#S> Tillbaka till telefonnumret. I vilken stadsdel bor hen?
#U> hon är 42 år
#S> Numret är 070-1234542.
#U> hur är det med hon som är 31 år
#S> Numret är 070-1234531.
#U>
#S> Tillbaka till huvudmenyn. Vad vill du göra?

--- search by a non-exclusive landmark
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["answer(slottsskogen)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(2))", "ask(?X.person_area(X))"]

--- search by another non-exclusive landmark
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["answer(hemkop)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(2))", "ask(?X.person_area(X))"]

--- search by exclusive combination of landmarks
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["answer(slottsskogen)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(2))", "ask(?X.person_area(X))"]
U> ["answer(hemkop)"]
S> ["icm:report_inference:person(person_susanna_andersson_4)", "answer(phonenumber(\"070-1234577\"))"]

--- topic switching in kpq
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["request(raise_volume)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(RaiseVolume, [], SuccessfulServiceAction()))"]
U>
S> ["icm:reraise:resolve(?X.phonenumber(X))", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["answer(slottsskogen)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(2))", "ask(?X.person_area(X))"]
U> ["answer(hemkop)"]
S> ["icm:report_inference:person(person_susanna_andersson_4)", "answer(phonenumber(\"070-1234577\"))"]

--- topic switching outside kpq
U> ["ask(?X.phonenumber(X))"]
S> ["icm:acc*pos", "icm:loadplan", "ask(?X.person_name(X))"]
U> ["answer(susanna_andersson)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?know_answer(?X.person_city(X)))"]
U> ["answer(yes)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(4))", "ask(?X.person_city(X))"]
U> ["request(raise_volume)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(RaiseVolume, [], SuccessfulServiceAction()))"]
U>
S> ["icm:reraise:resolve(?X.phonenumber(X))", "answer(number_of_alternatives(4))", "ask(?X.person_city(X))"]
U> ["answer(goteborg)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(3))", "ask(?X.person_area(X))"]
U> ["answer(slottsskogen)"]
S> ["icm:acc*pos", "answer(number_of_alternatives(2))", "ask(?X.person_area(X))"]
U> ["answer(hemkop)"]
S> ["icm:report_inference:person(person_susanna_andersson_4)", "answer(phonenumber(\"070-1234577\"))"]
