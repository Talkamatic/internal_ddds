--- basic instruction
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:2", "request(pour_water_into_bowl)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:-1", "request(whisk_flour_into_water)"]
U> ["report(done)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(EndSourdougStarterInstruction, [], SuccessfulServiceAction()))"]

--- report(done) tolerated also when not instructing
S> ["ask(?X.goal(X))"]
U> ["report(done)"]
S> ["icm:acc*pos", "ask(?X.goal(X))"]

--- return to top when requested
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["request(top)"]
S> ["icm:acc*pos", "icm:reraise:perform(top)", "ask(?X.goal(X))"]

--- Negative acceptance when request instruction on action without perform goal
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1"  , "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:2", "request(pour_water_into_bowl)"]
U> ["request(how)"]
S> ["icm:acc*neg:goal(perform(how))", "request(pour_water_into_bowl)"]

--- Kick off new plan when request instruction on other plan
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["request(how)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(pour_2_dl_water_into_a_kettle)"]

--- sequencing variation a
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter_index_variation_a)"]
S> ["icm:acc*pos", "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(done)"]
S> ["icm:acc*pos", "request(pour_water_into_bowl)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:-1", "request(whisk_flour_into_water)"]
U> ["report(done)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(EndSourdougStarterInstruction, [], SuccessfulServiceAction()))"]

--- sequencing variation b
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter_index_variation_b)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(done)"]
S> ["icm:acc*pos", "request(pour_water_into_bowl)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:-1", "request(whisk_flour_into_water)"]
U> ["report(done)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(EndSourdougStarterInstruction, [], SuccessfulServiceAction()))"]

--- sequencing variation c
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter_index_variation_c)"]
S> ["icm:acc*pos", "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:2", "request(pour_water_into_bowl)"]
U> ["report(done)"]
S> ["icm:acc*pos", "request(whisk_flour_into_water)"]
U> ["report(done)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(EndSourdougStarterInstruction, [], SuccessfulServiceAction()))"]

--- sequencing variation d
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter_index_variation_d)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(done)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(pour_water_into_bowl)"]
U> ["report(done)"]
S> ["icm:acc*pos", "request(whisk_flour_into_water)"]
U> ["report(done)"]
S> ["icm:acc*pos", "report(ServiceResultProposition(EndSourdougStarterInstruction, [], SuccessfulServiceAction()))"]

--- ask how, action treated as done after instruction
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["request(how)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(pour_2_dl_water_into_a_kettle)"]
U> ["report(done)"]
S> ["icm:acc*pos", "request(put_it_onto_stove_until_heated)"]
U> ["report(done)"]
S> ["icm:acc*pos", "report(action_status(heat_2_dl_water_to_40_degrees, done))"]
U>
S> ["icm:reraise:perform(instruct_sourdough_starter)", "icm:cardinal_sequencing:2", "request(pour_water_into_bowl)"]

--- return to instruction plan, reraise request and avoid sequencing
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["ask(?X.quantity_water(X))"]
S> ["answer(quantity_water(quantity_2_dl))"]
U>
S> ["icm:reraise:perform(instruct_sourdough_starter)", "request(heat_2_dl_water_to_40_degrees)"]

--- action specific downdate
S> ["ask(?X.goal(X))"]
U> ["request(instruct_sourdough_starter)"]
S> ["icm:acc*pos", "icm:cardinal_sequencing:1", "request(heat_2_dl_water_to_40_degrees)"]
U> ["report(action_status(heat_2_dl_water_to_40_degrees, done))"]
S> ["icm:cardinal_sequencing:2", "request(pour_water_into_bowl)"]
