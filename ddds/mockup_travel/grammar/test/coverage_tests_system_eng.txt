ICMMove(icm:per*pos:"something incomprehensible") :: I heard you say something incomprehensible.
Move(ask(?goal(perform(make_reservation)))) :: Do you want to make a reservation?
ICMMove(icm:und*int:USR*dest_city(paris)) :: To Paris, is that correct?
ICMMove(icm:und*int:USR*goal(perform(make_reservation))) :: Do you want to make a reservation?
ICMMove(icm:und*int:USR*goal(resolve(?X.price(X)))) :: Do you want to know the price?
Move(ask(?X.goal(X))) :: What would you like to do?

Move(ask(?goal(resolve(?X.price(X))))) :: Do you want to know the price?
Move(ask(?goal(resolve(?X.price(X), [dest_city(paris)])))) :: Do you want to know the price to Paris?
Move(ask(?set([goal(resolve(?X.price(X), [dest_city(paris)])), goal(perform(make_reservation))]))) :: Do you want to know the price to Paris or make a reservation?
ICMMove(icm:acc*neg:goal(resolve(?X.price(X)))) :: The function is not implemented.
ICMMove(icm:acc*neg:rejected(set([dest_city(london)]), CityValidity)) :: Invalid parameters London

Move(ask(?X.dept_month(X))) :: Which month do you want to travel?
Move(ask(?X.dept_month(X), [dest_city(paris)])) :: Which month do you want to travel to Paris?

ICMMove(icm:reraise:perform(top)) :: Returning to the start view.
ICMMove(icm:reraise:perform(make_reservation)) :: Returning to making a reservation.
ICMMove(icm:resume:perform(make_reservation)) :: You want to make a reservation.

report(ServiceResultProposition(MakeRandomReservation, [], SuccessfulServiceAction())) :: Performed MakeRandomReservation.
report(ServiceResultProposition(AddPassengers, [passenger_type_to_add(adult), passenger_quantity_to_add(1)], SuccessfulServiceAction())) :: Added 1 adults.
report(ServiceResultProposition(RegisterComment, [comment_message("mock comment"), comment_name("mock name")], SuccessfulServiceAction())) :: The comment mock comment was registered with the name mock name.
report(ServiceResultProposition(CancelReservation, [], FailedServiceAction(no_reservation_exists))) :: There is no reservation to cancel.
report(ServiceResultProposition(CancelReservation, [], FailedServiceAction(undefined_failure))) :: I'm sorry, something went wrong.

Move(ask(?X.dept_city(X), set([dept_city(paris), dept_city(london)]))) :: Where do you want to go from : Paris or London?

Move(answer(~qualified_for_membership)) :: You are not qualified for membership.
Move(answer(qualified_for_membership, [frequent_flyer_points(50), current_position(london)])) :: You have fifty frequent flyer points and are qualified for membership and you are in London.
Move(answer(next_membership_level(silver), [next_membership_points(99)])) :: You need ninety nine points to reach silver level.
Move(answer(next_membership_level(silver), [next_membership_points(100)])) :: You need 100 points to reach silver level.
