ICMMove(icm:per*pos:"algo incomprensible") :: Te he oído decir algo incomprensible.
Move(ask(?goal(perform(make_reservation)))) :: Quieres reservar un viaje?
ICMMove(icm:und*int:USR*dest_city(paris)) :: A Paris, es correcto?
ICMMove(icm:und*int:USR*goal(perform(make_reservation))) :: Quieres reservar un viaje?
ICMMove(icm:und*int:USR*goal(resolve(?X.price(X)))) :: Quieres saber sobre precios?
Move(ask(?X.goal(X))) :: Qué te gustaría hacer?

Move(ask(?goal(resolve(?X.price(X))))) :: Quieres saber sobre precios?
Move(ask(?goal(resolve(?X.price(X), [dest_city(paris)])))) :: Quieres saber el precio a Paris?
Move(ask(?set([goal(resolve(?X.price(X), [dest_city(paris)])), goal(perform(make_reservation))]))) :: Quieres saber el precio a Paris o reservar un viaje?
ICMMove(icm:acc*neg:goal(resolve(?X.price(X)))) :: Esta función no está implementada.
ICMMove(icm:acc*neg:rejected(set([dest_city(london)]), CityValidity)) :: Parámetros inválidos Londres

Move(ask(?X.dept_month(X))) :: Qué mes quieres viajar?
Move(ask(?X.dept_month(X), [dest_city(paris)])) :: Qué mes quieres viajar a Paris?

ICMMove(icm:reraise:perform(top)) :: Volviendo a la vista de inicio.
ICMMove(icm:reraise:perform(make_reservation)) :: Volviendo a reservar un viaje.
ICMMove(icm:resume:perform(make_reservation)) :: Quieres reservar un viaje.

report(ServiceResultProposition(MakeRandomReservation, [], SuccessfulServiceAction())) :: Realizado MakeRandomReservation.
report(ServiceResultProposition(AddPassengers, [passenger_type_to_add(adult), passenger_quantity_to_add(2)], SuccessfulServiceAction())) :: Añadido 2 adultos.
report(ServiceResultProposition(RegisterComment, [comment_message("mock comment"), comment_name("mock name")], SuccessfulServiceAction())) :: El comentario mock comment ha sido registrado con el nombre de mock name.
report(ServiceResultProposition(CancelReservation, [], FailedServiceAction(no_reservation_exists))) :: No hay reserva que cancelar.
report(ServiceResultProposition(CancelReservation, [], FailedServiceAction(undefined_failure))) :: Lo siento, algo ha ido mal.

Move(ask(?X.dept_city(X), set([dept_city(paris), dept_city(london)]))) :: Desde dónde quieres viajar : Paris o Londres?

Move(answer(~qualified_for_membership)) :: No estás calificado para obtener la pertenencia.
Move(answer(qualified_for_membership, [frequent_flyer_points(50), current_position(london)])) :: Tienes cincuenta puntos de viajero frequente y estás calificado para obtener la pertenencia y estás en Londres.
Move(answer(next_membership_level(silver), [next_membership_points(99)])) :: Necesitas noventa y nueve puntos para conseguir el nivel de plata.
Move(answer(next_membership_level(silver), [next_membership_points(100)])) :: Necesitas 100 puntos para conseguir el nivel de plata.
